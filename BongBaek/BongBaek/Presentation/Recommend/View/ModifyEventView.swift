//
//  ModifyEventView.swift
//  BongBaek
//
//  Created by ÏûÑÏû¨ÌòÑ on 7/6/25.
//

import SwiftUI

enum ModifyMode {
   case create
   case edit
}

struct ModifyEventView: View {
    let mode: ModifyMode
    @EnvironmentObject var eventManager: EventCreationManager
    @EnvironmentObject var router: NavigationRouter
    let eventDetailData: EventDetailData?
    @State private var mapView: KakaoMapView?
    @State var longitude: Double = 0.0
    @State var latitude: Double = 0.0
   
    @State var nickname: String = ""
    @State var alias: String = ""
    @State var money: String = ""
    @State var memo: String = ""
    @State private var selectedAttend: TextDropdownItem?
    @State private var selectedEvent: TextDropdownItem?
    @State private var selectedRelation: TextDropdownItem?
    @State var locationName: String = ""
    @State var locationAddress: String = ""
    @State private var showDatePicker = false
    @State var selectedDate: String = ""
    @Environment(\.dismiss) private var dismiss
    
    private var isRecommendationEdit: Bool {
           return mode == .edit && eventDetailData == nil && eventManager.recommendationResponse != nil
       }
   
    private var hasLocationData: Bool {
        return !locationName.isEmpty && longitude != 0.0 && latitude != 0.0
    }
    
    let attendItems = [
        TextDropdownItem(title: "Ï∞∏ÏÑù"),
        TextDropdownItem(title: "ÎØ∏Ï∞∏ÏÑù"),
    ]
    
    let eventItems = [
            TextDropdownItem(title: "Í≤∞ÌòºÏãù"),
            TextDropdownItem(title: "Ïû•Î°ÄÏãù"),
            TextDropdownItem(title: "ÎèåÏûîÏπò"),
            TextDropdownItem(title: "ÏÉùÏùº")
        ]
        
        let relationItems = [
            TextDropdownItem(title: "Í∞ÄÏ°±/ÏπúÏ≤ô"),
            TextDropdownItem(title: "ÏπúÍµ¨"),
            TextDropdownItem(title: "ÏßÅÏû•"),
            TextDropdownItem(title: "ÏÑ†ÌõÑÎ∞∞"),
            TextDropdownItem(title: "Ïù¥ÏõÉ"),
            TextDropdownItem(title: "Í∏∞ÌÉÄ")
        ]
   
    init(mode: ModifyMode, eventDetailData: EventDetailData? = nil) {
        self.mode = mode
        self.eventDetailData = eventDetailData
        print("üîß ModifyEventView init - mode: \(mode)")
    }
    
    var body: some View {
        VStack {
            ScrollView {
                HStack {
                    Button(action: {
                        dismiss()
                    }) {
                        Text("Ï∑®ÏÜå")
                            .bodyRegular16()
                            .foregroundStyle(.gray200)
                    }
                    .frame(width: 44, height: 44)
                    .padding(.leading, -8)
                    
                    Spacer()
                    
                    Text(mode == .create ? "Í≤ΩÏ°∞ÏÇ¨ Í∏∞Î°ùÌïòÍ∏∞" : "Í≤ΩÏ°∞ÏÇ¨ ÏàòÏ†ïÌïòÍ∏∞")
                        .titleSemiBold18()
                        .foregroundColor(.white)
                    
                    Spacer()
                    
                    Color.clear
                        .frame(width: 44, height: 44)
                }
                .padding(.horizontal, 20)
                .padding(.top, 4)
                .padding(.bottom, 16)
                .background(.gray900)
                
                VStack(spacing: 0) {
                    VStack {
                        CustomTextField(
                            title: "Ïù¥Î¶Ñ",
                            icon: "icon_person_16",
                            placeholder: "ÎãâÎÑ§ÏûÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî",
                            text: $nickname,
                            validationRule: ValidationRule(
                                minLength: 2,
                                maxLength: 10
                            ),isReadOnly: isRecommendationEdit,isRequired: true
                        )
                        
                        CustomTextField(
                            title: "Î≥ÑÎ™Ö",
                            icon: "icon_event_16",
                            placeholder: "Î≥ÑÎ™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî",
                            text: $alias,
                            validationRule: ValidationRule(
                                minLength: 2,
                                maxLength: 10
                            ),isReadOnly: isRecommendationEdit,isRequired: true
                        )
                        .padding(.top, 32)
                    }
                    .padding(.horizontal, 20)
                    .padding(.top, 24)

                    dropdownSection
                        .padding(.top, 16)

                    VStack(alignment: .leading, spacing: 8) {
                        HStack(spacing: 8) {
                            CustomTextField(
                                title: "Í≤ΩÏ°∞ÏÇ¨ÎπÑ",
                                icon: "icon_coin_16",
                                placeholder: "Í∏àÏï°ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî",
                                text: $money,
                                validationRule: ValidationRule(
                                    minLength: 1,
                                    maxLength: 10
                                ),keyboardType: .numberPad
                            )
                            
                            Text("Ïõê")
                                .bodyRegular16()
                                .foregroundColor(.white)
                        }
                        
                        CustomDropdown(
                            title: "Ï∞∏ÏÑùÏó¨Î∂Ä",
                            icon: "icon_check 1",
                            placeholder: "Í≤ΩÏ°∞ÏÇ¨Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
                            items: attendItems,
                            selectedItem: $selectedAttend,
                            isDisabled: isRecommendationEdit
                        )
                        .padding(.top, 16)
                        
                        CustomTextField(
                            title: "ÎÇ†Ïßú",
                            icon: "icon_calendar_16",
                            placeholder: "ÏÉùÎÖÑÏõîÏùºÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî",
                            text: $selectedDate,
                            isReadOnly: true,
                            isRequired: true) {
                                print("ÏÉùÎÖÑÏõîÏùº ÌïÑÎìú ÌÑ∞ÏπòÎê®")
                                
                                DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
                                    showDatePicker = true
                                }
                            }
                            .padding(.top, 16)
                        
                        VStack(spacing: 16) {
                            HStack {
                                HStack {
                                    Image("icon_location_16")
                                    Text("ÌñâÏÇ¨Ïû•")
                                        .bodyMedium14()
                                        .foregroundStyle(.gray300)
                                }
                                
                                Spacer()
                                
                                Button {
                                    print("ÏàòÏ†ïÌïòÍ∏∞")
                                } label: {
                                    Text("ÏàòÏ†ïÌïòÍ∏∞")
                                        .bodyRegular14()
                                        .foregroundStyle(.gray300)
                                }
                            }
                            
                            VStack(alignment: .leading, spacing: 8) {
                                mapSection
                                    .frame(maxWidth: .infinity)
                                    .frame(height: 180)
                                    .cornerRadius(12)
                                
                                VStack(alignment: .leading, spacing: 4) {
                                    Text(locationName)
                                        .bodyMedium16()
                                        .foregroundStyle(.white)
                                    
                                    Text(locationAddress)
                                        .bodyMedium16()
                                        .foregroundStyle(.gray300)
                                }
                            }
                        }
                            .padding(.top, 16)
                        

                        
                    }
                    .padding(.horizontal, 20)
                    .padding(.top, 16)
                    .padding(.bottom, 24)
                }
                .background(.gray800)
                .cornerRadius(12)
                .padding(.horizontal, 20)
                .padding(.top, 16)
                
                EventMemoView(memo: $memo)
                    .padding(.top, 16)
                    .padding(.horizontal, 20)
                
                Button {
                    if mode == .create {
                        createEvent()
                    } else {
                        updateEvent()
                    }
                } label: {
                    Text(mode == .create ? "Í∏∞Î°ùÌïòÍ∏∞" : "ÏàòÏ†ïÌïòÍ∏∞")
                        .titleSemiBold18()
                        .foregroundColor(.white)
                }
                .frame(maxWidth: .infinity)
                .frame(height: 55)
                .background(.primaryNormal)
                .cornerRadius(12)
                .padding(.horizontal, 20)
                .padding(.top, 8)
            }
            .onTapGesture {
                hideKeyboard()
            }
            .sheet(isPresented: $showDatePicker) {
                DatePickerBottomSheetView2(
                    onComplete: { selectedDateString in
                        selectedDate = selectedDateString
                        print("ÏÑ†ÌÉùÎêú ÎÇ†Ïßú: \(selectedDateString)")
                    }

                )
                .presentationDetents([.height(359)])
            }
        }
        .background(.gray900)
        .navigationBarHidden(true)
        .navigationBarBackButtonHidden()
        .toolbar(.hidden, for: .navigationBar)
        .onAppear {
            setupInitialValues()
        }
    }
    
    private var mapSection: some View {
          Group {
              // ÏúÑÏπò Ï†ïÎ≥¥Í∞Ä ÏûàÎäî Í≤ΩÏö∞ ÏßÄÎèÑ ÌëúÏãú
              if hasLocationData {
                  if let mapView = mapView {
                      mapView
                          .frame(height: 180)
                          .cornerRadius(12)
                          .onAppear {
                              updateMapLocation()
                          }
                  } else {
                      Rectangle()
                          .foregroundStyle(.gray750)
                          .frame(maxWidth: .infinity)
                          .frame(height: 180)
                          .cornerRadius(12)
                          .onAppear {
                              mapView = KakaoMapView(draw: .constant(true))
                              // ÏßÄÎèÑ ÏÉùÏÑ± ÌõÑ ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏
                              DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                                  updateMapLocation()
                              }
                          }
                  }
              } else {
                  // ÏúÑÏπò Ï†ïÎ≥¥Í∞Ä ÏóÜÎäî Í≤ΩÏö∞ Îπà Rectangle ÌëúÏãú
                  VStack {
                      Image(systemName: "location.slash")
                          .font(.system(size: 30))
                          .foregroundColor(.gray500)
                      
                      Text("ÏúÑÏπò Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§")
                          .bodyRegular14()
                          .foregroundColor(.gray500)
                          .padding(.top, 8)
                  }
                  .frame(maxWidth: .infinity)
                  .frame(height: 180)
                  .background(.gray750)
                  .cornerRadius(12)
              }
          }
      }
    
    private func updateMapLocation() {
           guard hasLocationData else { return }
           
           mapView?.updateLocation(longitude: longitude, latitude: latitude)
           print("üó∫Ô∏è ÏßÄÎèÑ ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏: \(locationName)")
           print("üìç Ï¢åÌëú: \(longitude), \(latitude)")
       }
    
    private func handleLocationSelection(_ document: KLDocument) {
        // EventCreationManagerÏóê ÏúÑÏπò Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
        eventManager.updateLocationData(selectedLocation: document)
        
        
        // ÏßÄÎèÑ ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏
        if let longitude = Double(document.x),
           let latitude = Double(document.y) {
            mapView?.updateLocation(longitude: longitude, latitude: latitude)
            print("ÏßÄÎèÑ ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏: \(document.placeName)")
            print("Ï¢åÌëú: \(longitude), \(latitude)")
        }

    }
   
    
    private var dropdownSection: some View {
        VStack(spacing: 24) {
            CustomDropdown(
                title: "Í¥ÄÍ≥Ñ",
                icon: "icon_relation",
                placeholder: "Í¥ÄÍ≥ÑÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
                items: relationItems,
                selectedItem: $selectedRelation,
                isDisabled: isRecommendationEdit
            )
            
            CustomDropdown(
                title: "Í≤ΩÏ°∞ÏÇ¨",
                icon: "icon_event_16",
                placeholder: "Í≤ΩÏ°∞ÏÇ¨Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
                items: eventItems,
                selectedItem: $selectedEvent,
                isDisabled: isRecommendationEdit
            )
        }
        .padding(.horizontal, 20)
    }
   
    /// üÜï Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï Î©îÏÑúÎìú - EventCreationManagerÏóêÏÑú ÏßÅÏ†ë Ï†ëÍ∑º
    private func setupInitialValues() {
        print("üîß Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï ÏãúÏûë...")
        
        if let eventDetail = eventDetailData {
            // AllRecordsViewÏóêÏÑú Ïò® Í≤ΩÏö∞: EventDetailData ÏÇ¨Ïö©
            setupFromEventDetail(eventDetail)
        } else {
            // Ï∂îÏ≤ú ÌîåÎ°úÏö∞ÏóêÏÑú Ïò® Í≤ΩÏö∞: EventCreationManager ÏÇ¨Ïö©
            setupFromRecommendation()
        }
        
        print("‚úÖ Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï ÏôÑÎ£å")
        print("  - ÎãâÎÑ§ÏûÑ: \(nickname)")
        print("  - Î≥ÑÎ™Ö: \(alias)")
        print("  - Í∏àÏï°: \(money)Ïõê")
        print("  - Ï∞∏ÏÑù: \(selectedAttend?.title ?? "ÏóÜÏùå")")
        print("  - ÎÇ†Ïßú: \(selectedDate)")
    }
    
//    private func setupFromEventDetail(_ eventDetail: EventDetailData) {
//        print("EventDetailDataÎ°úÎ∂ÄÌÑ∞ Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï...")
//        
//        // Í∞úÏù∏ Ï†ïÎ≥¥
//        nickname = eventDetail.hostInfo.hostName
//        alias = eventDetail.hostInfo.hostNickname
//        
//        // Í∏àÏï° (EventDetailDataÏùò cost ÏÇ¨Ïö©)
//        money = "\(eventDetail.eventInfo.cost)"
//        print("Í∏∞Ï°¥ Í∏∞Î°ù Í∏àÏï° ÏÑ§Ï†ï: \(eventDetail.eventInfo.cost)Ïõê")
//        
//        // Ï∞∏ÏÑù Ïó¨Î∂Ä
//        let attendanceText = eventDetail.eventInfo.isAttend ? "Ï∞∏ÏÑù" : "ÎØ∏Ï∞∏ÏÑù"
//        if let attendItem = attendItems.first(where: { $0.title == attendanceText }) {
//            selectedAttend = attendItem
//        }
//        
//        // ÎÇ†Ïßú ÏÑ§Ï†ï (API ÌòïÏãù: "2025-01-18" ‚Üí "2025ÎÖÑ 1Ïõî 18Ïùº")
//        selectedDate = formatDateForDisplay(eventDetail.eventInfo.eventDate)
//        
//        // Í¥ÄÍ≥Ñ
//        if let relationItem = relationItems.first(where: { $0.title == eventDetail.eventInfo.relationship }) {
//            selectedRelation = relationItem
//        }
//        
//        // Ïù¥Î≤§Ìä∏ Ïπ¥ÌÖåÍ≥†Î¶¨
//        if let eventItem = eventItems.first(where: { $0.title == eventDetail.eventInfo.eventCategory }) {
//            selectedEvent = eventItem
//        }
//    }
    
    private func setupFromEventDetail(_ eventDetail: EventDetailData) {
        print("EventDetailDataÎ°úÎ∂ÄÌÑ∞ Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï...")
        
        // Í∞úÏù∏ Ï†ïÎ≥¥
        nickname = eventDetail.hostInfo.hostName
        alias = eventDetail.hostInfo.hostNickname
        
        // Í∏àÏï°
        money = "\(eventDetail.eventInfo.cost)"
        print("Í∏∞Ï°¥ Í∏∞Î°ù Í∏àÏï° ÏÑ§Ï†ï: \(eventDetail.eventInfo.cost)Ïõê")
        
        // Ï∞∏ÏÑù Ïó¨Î∂Ä
        let attendanceText = eventDetail.eventInfo.isAttend ? "Ï∞∏ÏÑù" : "ÎØ∏Ï∞∏ÏÑù"
        if let attendItem = attendItems.first(where: { $0.title == attendanceText }) {
            selectedAttend = attendItem
        }
        
        // ÎÇ†Ïßú ÏÑ§Ï†ï
        selectedDate = formatDateForDisplay(eventDetail.eventInfo.eventDate)
        
        // ÏúÑÏπò Ï†ïÎ≥¥ ÏÑ§Ï†ï (Ï∂îÍ∞Ä)
        locationName = eventDetail.locationInfo.location
        locationAddress = eventDetail.locationInfo.location // ÎòêÎäî Îã§Î•∏ Ï£ºÏÜå ÌïÑÎìúÍ∞Ä ÏûàÎã§Î©¥ ÏÇ¨Ïö©
        
//        if let lng = eventDetail.locationInfo.longitude,
//           let lat = eventDetail.locationInfo.latitude {
//            longitude = lng
//            latitude = lat
//        } else {
//            longitude = 0.0
//            latitude = 0.0
//        }
        
        
        // Í¥ÄÍ≥Ñ
        if let relationItem = relationItems.first(where: { $0.title == eventDetail.eventInfo.relationship }) {
            selectedRelation = relationItem
        }
        
        // Ïù¥Î≤§Ìä∏ Ïπ¥ÌÖåÍ≥†Î¶¨
        if let eventItem = eventItems.first(where: { $0.title == eventDetail.eventInfo.eventCategory }) {
            selectedEvent = eventItem
        }
        
        print("‚úÖ ÏúÑÏπò Ï†ïÎ≥¥ ÏÑ§Ï†ï ÏôÑÎ£å")
        print("  - ÏúÑÏπòÎ™Ö: \(locationName)")
        print("  - ÏúÑÏπò Ï£ºÏÜå: \(locationAddress)")
    }
    
    private func setupFromRecommendation() {
        print("üéØ EventCreationManagerÎ°úÎ∂ÄÌÑ∞ Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï...")
        
        // EventCreationManagerÏóêÏÑú Í∏∞Ï°¥ ÏûÖÎ†• Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        nickname = eventManager.hostName
        alias = eventManager.hostNickname
        
        // Ï∂îÏ≤úÎ∞õÏùÄ Í∏àÏï° ÏÑ§Ï†ï (ÏûàÎäî Í≤ΩÏö∞)
        if let recommendation = eventManager.recommendationResponse,
           let data = recommendation.data {
            money = "\(data.cost)"
            print("üí∞ Ï∂îÏ≤ú Í∏àÏï° ÏÑ§Ï†ï: \(data.cost)Ïõê")
        }
        
        // Ï∞∏ÏÑù Ïó¨Î∂Ä ÏÑ§Ï†ï
        let attendanceText = eventManager.isAttend ? "Ï∞∏ÏÑù" : "ÎØ∏Ï∞∏ÏÑù"
        if let attendItem = attendItems.first(where: { $0.title == attendanceText }) {
            selectedAttend = attendItem
        }
        
        // ÎÇ†Ïßú ÏÑ§Ï†ï
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyyÎÖÑ MÏõî dÏùº"
        formatter.locale = Locale(identifier: "ko_KR")
        selectedDate = formatter.string(from: eventManager.eventDate)
        
        // Í¥ÄÍ≥Ñ
        if let relationItem = relationItems.first(where: { $0.title == eventManager.relationship }) {
            selectedRelation = relationItem
        }
        
        locationName = eventManager.locationName
        locationAddress = eventManager.locationAddress
        
        // Ïù¥Î≤§Ìä∏ Ïπ¥ÌÖåÍ≥†Î¶¨
        if let eventItem = eventItems.first(where: { $0.title == eventManager.eventCategory }) {
            selectedEvent = eventItem
        }
    }

    /// ÎÇ†Ïßú Ìè¨Îß∑ Î≥ÄÌôò Ìó¨Ìçº Î©îÏÑúÎìú
    private func formatDateForDisplay(_ apiDateString: String) -> String {
        // API ÌòïÏãù: "2025-01-18" ‚Üí UI ÌòïÏãù: "2025ÎÖÑ 1Ïõî 18Ïùº"
        let inputFormatter = DateFormatter()
        inputFormatter.dateFormat = "yyyy-MM-dd"
        
        let outputFormatter = DateFormatter()
        outputFormatter.dateFormat = "yyyyÎÖÑ MÏõî dÏùº"
        outputFormatter.locale = Locale(identifier: "ko_KR")
        
        if let date = inputFormatter.date(from: apiDateString) {
            return outputFormatter.string(from: date)
        } else {
            return apiDateString // Î≥ÄÌôò Ïã§Ìå® Ïãú ÏõêÎ≥∏ Î∞òÌôò
        }
    }
    
    
    
    
    private func createEvent() {
        // ÏÉà Ïù¥Î≤§Ìä∏ ÏÉùÏÑ± Î°úÏßÅ (Í∏∞Ï°¥Í≥º ÎèôÏùº)
    }
    
    private func updateEvent() {
        // ÏàòÏ†ïÎêú Ïù¥Î≤§Ìä∏ ÏÉùÏÑ± Î°úÏßÅ
        if mode == .edit && eventManager.recommendationResponse != nil {
            // Ï∂îÏ≤ú Í∏àÏï° ÏàòÏ†ï Î™®Îìú
            submitModifiedRecommendation()
        } else {
            // ÏùºÎ∞ò ÏàòÏ†ï Î™®Îìú
            router.pop()
        }
    }
    
    /// üÜï ÏàòÏ†ïÎêú Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞Î°ú Ïù¥Î≤§Ìä∏ ÏÉùÏÑ±
    private func submitModifiedRecommendation() {
        print("üìù ÏàòÏ†ïÎêú Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞Î°ú Ïù¥Î≤§Ìä∏ ÏÉùÏÑ± ÏãúÏûë...")
        
        Task {
            // ÏàòÏ†ïÎêú Îç∞Ïù¥ÌÑ∞Î°ú EventCreationManager ÏóÖÎç∞Ïù¥Ìä∏
            updateEventManagerWithModifiedData()
            
            // ÏàòÏ†ïÎêú Í∏àÏï°ÏúºÎ°ú Ïù¥Î≤§Ìä∏ ÏÉùÏÑ±
            let modifiedAmount = Int(money) ?? 0
            let success = await eventManager.submitEventWithModifiedAmount(modifiedAmount: modifiedAmount)
            
            if success {
                await MainActor.run {
                    router.pop()
                }
            } else {
                print("ÏàòÏ†ïÎêú Ïù¥Î≤§Ìä∏ ÏÉùÏÑ± Ïã§Ìå®: \(eventManager.submitError ?? "Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò")")
                // TODO: ÏóêÎü¨ Ï≤òÎ¶¨
            }
        }
    }
    
    ///  ÏàòÏ†ïÎêú Îç∞Ïù¥ÌÑ∞Î°ú EventCreationManager ÏóÖÎç∞Ïù¥Ìä∏
    private func updateEventManagerWithModifiedData() {
        // ÏàòÏ†ïÎêú Í∞úÏù∏ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
        eventManager.updateRecommendData(
            hostName: nickname,
            hostNickname: alias,
            relationship: eventManager.relationship,
            detailSelected: eventManager.detailSelected,
            contactFrequency: eventManager.contactFrequency,
            meetFrequency: eventManager.meetFrequency
        )
        
        // Ï∞∏ÏÑù Ïó¨Î∂Ä ÏóÖÎç∞Ïù¥Ìä∏
        let isAttending = selectedAttend?.title == "Ï∞∏ÏÑù"
        let attendanceType: AttendanceType = isAttending ? .yes : .no
        
        eventManager.updateDateData(
            eventDate: eventManager.eventDate,
            selectedAttendance: attendanceType
        )
        
        print("EventCreationManager Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å")
    }
    
}


struct ModifyEventView2: View {
    let mode: ModifyMode
    @EnvironmentObject var eventManager: EventCreationManager
    @EnvironmentObject var router: NavigationRouter
    let eventDetailData: EventDetailData?
   
    @State var nickname: String = ""
    @State var alias: String = ""
    @State var money: String = ""
    @State var memo: String = ""
    @State private var selectedAttend: TextDropdownItem?
    @State private var selectedEvent: TextDropdownItem?
    @State private var selectedRelation: TextDropdownItem?
    @State private var showDatePicker = false
    @State var selectedDate: String = ""
    @Environment(\.dismiss) private var dismiss
    
    private var isRecommendationEdit: Bool {
           return mode == .edit && eventDetailData == nil && eventManager.recommendationResponse != nil
       }
   
    let attendItems = [
        TextDropdownItem(title: "Ï∞∏ÏÑù"),
        TextDropdownItem(title: "ÎØ∏Ï∞∏ÏÑù"),
    ]
    
    let eventItems = [
            TextDropdownItem(title: "Í≤∞ÌòºÏãù"),
            TextDropdownItem(title: "Ïû•Î°ÄÏãù"),
            TextDropdownItem(title: "ÎèåÏûîÏπò"),
            TextDropdownItem(title: "ÏÉùÏùº")
        ]
        
        let relationItems = [
            TextDropdownItem(title: "Í∞ÄÏ°±/ÏπúÏ≤ô"),
            TextDropdownItem(title: "ÏπúÍµ¨"),
            TextDropdownItem(title: "ÏßÅÏû•"),
            TextDropdownItem(title: "ÏÑ†ÌõÑÎ∞∞"),
            TextDropdownItem(title: "Ïù¥ÏõÉ"),
            TextDropdownItem(title: "Í∏∞ÌÉÄ")
        ]
   
    init(mode: ModifyMode, eventDetailData: EventDetailData? = nil) {
        self.mode = mode
        self.eventDetailData = eventDetailData
        print("üîß ModifyEventView init - mode: \(mode)")
    }
    
    var body: some View {
        VStack {
            ScrollView {
                HStack {
                    Button(action: {
                        dismiss()
                    }) {
                        Text("Ï∑®ÏÜå")
                            .bodyRegular16()
                            .foregroundStyle(.gray200)
                    }
                    .frame(width: 44, height: 44)
                    .padding(.leading, -8)
                    
                    Spacer()
                    
                    Text(mode == .create ? "Í≤ΩÏ°∞ÏÇ¨ Í∏∞Î°ùÌïòÍ∏∞" : "Í≤ΩÏ°∞ÏÇ¨ ÏàòÏ†ïÌïòÍ∏∞")
                        .titleSemiBold18()
                        .foregroundColor(.white)
                    
                    Spacer()
                    
                    Color.clear
                        .frame(width: 44, height: 44)
                }
                .padding(.horizontal, 20)
                .padding(.top, 4)
                .padding(.bottom, 16)
                .background(.gray900)
                
                VStack(spacing: 0) {
                    VStack {
                        CustomTextField(
                            title: "Ïù¥Î¶Ñ",
                            icon: "icon_person_16",
                            placeholder: "ÎãâÎÑ§ÏûÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî",
                            text: $nickname,
                            validationRule: ValidationRule(
                                minLength: 2,
                                maxLength: 10
                            ),isReadOnly: isRecommendationEdit,isRequired: true
                        )
                        
                        CustomTextField(
                            title: "Î≥ÑÎ™Ö",
                            icon: "icon_event_16",
                            placeholder: "Î≥ÑÎ™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî",
                            text: $alias,
                            validationRule: ValidationRule(
                                minLength: 2,
                                maxLength: 10
                            ),isReadOnly: isRecommendationEdit,isRequired: true
                        )
                        .padding(.top, 32)
                    }
                    .padding(.horizontal, 20)
                    .padding(.top, 24)

                    dropdownSection
                        .padding(.top, 16)

                    VStack(alignment: .leading, spacing: 8) {
                        HStack(spacing: 8) {
                            CustomTextField(
                                title: "Í≤ΩÏ°∞ÏÇ¨ÎπÑ",
                                icon: "icon_coin_16",
                                placeholder: "Í∏àÏï°ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî",
                                text: $money,
                                validationRule: ValidationRule(
                                    minLength: 1,
                                    maxLength: 10
                                ),keyboardType: .numberPad
                            )
                            
                            Text("Ïõê")
                                .bodyRegular16()
                                .foregroundColor(.white)
                        }
                        
                        CustomDropdown(
                            title: "Ï∞∏ÏÑùÏó¨Î∂Ä",
                            icon: "icon_check 1",
                            placeholder: "Í≤ΩÏ°∞ÏÇ¨Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
                            items: attendItems,
                            selectedItem: $selectedAttend,
                            isDisabled: isRecommendationEdit
                        )
                        .padding(.top, 16)
                        
                        CustomTextField(
                            title: "ÎÇ†Ïßú",
                            icon: "icon_calendar_16",
                            placeholder: "ÏÉùÎÖÑÏõîÏùºÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî",
                            text: $selectedDate,
                            isReadOnly: true,
                            isRequired: true) {
                                print("ÏÉùÎÖÑÏõîÏùº ÌïÑÎìú ÌÑ∞ÏπòÎê®")
                                
                                DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
                                    showDatePicker = true
                                }
                            }
                            .padding(.top, 16)
                        
                        EventMapView()
                            .padding(.top, 16)
                        

                        
                    }
                    .padding(.horizontal, 20)
                    .padding(.top, 16)
                    .padding(.bottom, 24)
                }
                .background(.gray800)
                .cornerRadius(12)
                .padding(.horizontal, 20)
                .padding(.top, 16)
                
                EventMemoView(memo: $memo)
                    .padding(.top, 16)
                    .padding(.horizontal, 20)
                
                Button {
                    if mode == .create {
                        createEvent()
                    } else {
                        updateEvent()
                    }
                } label: {
                    Text(mode == .create ? "Í∏∞Î°ùÌïòÍ∏∞" : "ÏàòÏ†ïÌïòÍ∏∞")
                        .titleSemiBold18()
                        .foregroundColor(.white)
                }
                .frame(maxWidth: .infinity)
                .frame(height: 55)
                .background(.primaryNormal)
                .cornerRadius(12)
                .padding(.horizontal, 20)
                .padding(.top, 8)
            }
            .onTapGesture {
                hideKeyboard()
            }
            .sheet(isPresented: $showDatePicker) {
                DatePickerBottomSheetView3(
                    onComplete: { selectedDateString in
                        selectedDate = selectedDateString
                        print("ÏÑ†ÌÉùÎêú ÎÇ†Ïßú: \(selectedDateString)")
                    }

                )
                .presentationDetents([.height(359)])
            }
        }
        .sheet(isPresented: $showDatePicker) {
            DatePickerBottomSheetView2 { selectedDateString in
                selectedDate = selectedDateString
                print("ÏÑ†ÌÉùÎêú ÎÇ†Ïßú: \(selectedDateString)")
            }
            .presentationDetents([.height(359)])
        }

        .background(.gray900)
        .navigationBarHidden(true)
        .navigationBarBackButtonHidden()
        .toolbar(.hidden, for: .navigationBar)
        .onAppear {
            setupInitialValues()
        }
    }
   
    
    private var dropdownSection: some View {
        VStack(spacing: 24) {
            CustomDropdown(
                title: "Í¥ÄÍ≥Ñ",
                icon: "icon_relation",
                placeholder: "Í¥ÄÍ≥ÑÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
                items: relationItems,
                selectedItem: $selectedRelation,
                isDisabled: isRecommendationEdit
            )
            
            CustomDropdown(
                title: "Í≤ΩÏ°∞ÏÇ¨",
                icon: "icon_event_16",
                placeholder: "Í≤ΩÏ°∞ÏÇ¨Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
                items: eventItems,
                selectedItem: $selectedEvent,
                isDisabled: isRecommendationEdit
            )
        }
        .padding(.horizontal, 20)
    }
   
    /// üÜï Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï Î©îÏÑúÎìú - EventCreationManagerÏóêÏÑú ÏßÅÏ†ë Ï†ëÍ∑º
    private func setupInitialValues() {
        print("üîß Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï ÏãúÏûë...")
        
        if let eventDetail = eventDetailData {
            // AllRecordsViewÏóêÏÑú Ïò® Í≤ΩÏö∞: EventDetailData ÏÇ¨Ïö©
            setupFromEventDetail(eventDetail)
        } else {
            // Ï∂îÏ≤ú ÌîåÎ°úÏö∞ÏóêÏÑú Ïò® Í≤ΩÏö∞: EventCreationManager ÏÇ¨Ïö©
            setupFromRecommendation()
        }
        
        print("‚úÖ Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï ÏôÑÎ£å")
        print("  - ÎãâÎÑ§ÏûÑ: \(nickname)")
        print("  - Î≥ÑÎ™Ö: \(alias)")
        print("  - Í∏àÏï°: \(money)Ïõê")
        print("  - Ï∞∏ÏÑù: \(selectedAttend?.title ?? "ÏóÜÏùå")")
        print("  - ÎÇ†Ïßú: \(selectedDate)")
    }
    
    private func setupFromEventDetail(_ eventDetail: EventDetailData) {
        print("EventDetailDataÎ°úÎ∂ÄÌÑ∞ Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï...")
        
        // Í∞úÏù∏ Ï†ïÎ≥¥
        nickname = eventDetail.hostInfo.hostName
        alias = eventDetail.hostInfo.hostNickname
        
        // Í∏àÏï° (EventDetailDataÏùò cost ÏÇ¨Ïö©)
        money = "\(eventDetail.eventInfo.cost)"
        print("Í∏∞Ï°¥ Í∏∞Î°ù Í∏àÏï° ÏÑ§Ï†ï: \(eventDetail.eventInfo.cost)Ïõê")
        
        // Ï∞∏ÏÑù Ïó¨Î∂Ä
        let attendanceText = eventDetail.eventInfo.isAttend ? "Ï∞∏ÏÑù" : "ÎØ∏Ï∞∏ÏÑù"
        if let attendItem = attendItems.first(where: { $0.title == attendanceText }) {
            selectedAttend = attendItem
        }
        
        // ÎÇ†Ïßú ÏÑ§Ï†ï (API ÌòïÏãù: "2025-01-18" ‚Üí "2025ÎÖÑ 1Ïõî 18Ïùº")
        selectedDate = formatDateForDisplay(eventDetail.eventInfo.eventDate)
        
        // Í¥ÄÍ≥Ñ
        if let relationItem = relationItems.first(where: { $0.title == eventDetail.eventInfo.relationship }) {
            selectedRelation = relationItem
        }
        
        // Ïù¥Î≤§Ìä∏ Ïπ¥ÌÖåÍ≥†Î¶¨
        if let eventItem = eventItems.first(where: { $0.title == eventDetail.eventInfo.eventCategory }) {
            selectedEvent = eventItem
        }
    }
    
    private func setupFromRecommendation() {
        print("üéØ EventCreationManagerÎ°úÎ∂ÄÌÑ∞ Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï...")
        
        // EventCreationManagerÏóêÏÑú Í∏∞Ï°¥ ÏûÖÎ†• Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        nickname = eventManager.hostName
        alias = eventManager.hostNickname
        
        // Ï∂îÏ≤úÎ∞õÏùÄ Í∏àÏï° ÏÑ§Ï†ï (ÏûàÎäî Í≤ΩÏö∞)
        if let recommendation = eventManager.recommendationResponse,
           let data = recommendation.data {
            money = "\(data.cost)"
            print("üí∞ Ï∂îÏ≤ú Í∏àÏï° ÏÑ§Ï†ï: \(data.cost)Ïõê")
        }
        
        // Ï∞∏ÏÑù Ïó¨Î∂Ä ÏÑ§Ï†ï
        let attendanceText = eventManager.isAttend ? "Ï∞∏ÏÑù" : "ÎØ∏Ï∞∏ÏÑù"
        if let attendItem = attendItems.first(where: { $0.title == attendanceText }) {
            selectedAttend = attendItem
        }
        
        // ÎÇ†Ïßú ÏÑ§Ï†ï
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyyÎÖÑ MÏõî dÏùº"
        formatter.locale = Locale(identifier: "ko_KR")
        selectedDate = formatter.string(from: eventManager.eventDate)
        
        // Í¥ÄÍ≥Ñ
        if let relationItem = relationItems.first(where: { $0.title == eventManager.relationship }) {
            selectedRelation = relationItem
        }
        
        // Ïù¥Î≤§Ìä∏ Ïπ¥ÌÖåÍ≥†Î¶¨
        if let eventItem = eventItems.first(where: { $0.title == eventManager.eventCategory }) {
            selectedEvent = eventItem
        }
    }

    /// ÎÇ†Ïßú Ìè¨Îß∑ Î≥ÄÌôò Ìó¨Ìçº Î©îÏÑúÎìú
    private func formatDateForDisplay(_ apiDateString: String) -> String {
        // API ÌòïÏãù: "2025-01-18" ‚Üí UI ÌòïÏãù: "2025ÎÖÑ 1Ïõî 18Ïùº"
        let inputFormatter = DateFormatter()
        inputFormatter.dateFormat = "yyyy-MM-dd"
        
        let outputFormatter = DateFormatter()
        outputFormatter.dateFormat = "yyyyÎÖÑ MÏõî dÏùº"
        outputFormatter.locale = Locale(identifier: "ko_KR")
        
        if let date = inputFormatter.date(from: apiDateString) {
            return outputFormatter.string(from: date)
        } else {
            return apiDateString // Î≥ÄÌôò Ïã§Ìå® Ïãú ÏõêÎ≥∏ Î∞òÌôò
        }
    }
    
    
    
    
    private func createEvent() {
        // ÏÉà Ïù¥Î≤§Ìä∏ ÏÉùÏÑ± Î°úÏßÅ (Í∏∞Ï°¥Í≥º ÎèôÏùº)
    }
    
    private func updateEvent() {
        // ÏàòÏ†ïÎêú Ïù¥Î≤§Ìä∏ ÏÉùÏÑ± Î°úÏßÅ
        if mode == .edit && eventManager.recommendationResponse != nil {
            // Ï∂îÏ≤ú Í∏àÏï° ÏàòÏ†ï Î™®Îìú
            submitModifiedRecommendation()
        } else {
            // ÏùºÎ∞ò ÏàòÏ†ï Î™®Îìú
            router.pop()
        }
    }
    
    /// üÜï ÏàòÏ†ïÎêú Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞Î°ú Ïù¥Î≤§Ìä∏ ÏÉùÏÑ±
    private func submitModifiedRecommendation() {
        print("üìù ÏàòÏ†ïÎêú Ï∂îÏ≤ú Îç∞Ïù¥ÌÑ∞Î°ú Ïù¥Î≤§Ìä∏ ÏÉùÏÑ± ÏãúÏûë...")
        
        Task {
            // ÏàòÏ†ïÎêú Îç∞Ïù¥ÌÑ∞Î°ú EventCreationManager ÏóÖÎç∞Ïù¥Ìä∏
            updateEventManagerWithModifiedData()
            
            // ÏàòÏ†ïÎêú Í∏àÏï°ÏúºÎ°ú Ïù¥Î≤§Ìä∏ ÏÉùÏÑ±
            let modifiedAmount = Int(money) ?? 0
            let success = await eventManager.submitEventWithModifiedAmount(modifiedAmount: modifiedAmount)
            
            if success {
                await MainActor.run {
                    router.pop()
                }
            } else {
                print("ÏàòÏ†ïÎêú Ïù¥Î≤§Ìä∏ ÏÉùÏÑ± Ïã§Ìå®: \(eventManager.submitError ?? "Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò")")
                // TODO: ÏóêÎü¨ Ï≤òÎ¶¨
            }
        }
    }
    
    ///  ÏàòÏ†ïÎêú Îç∞Ïù¥ÌÑ∞Î°ú EventCreationManager ÏóÖÎç∞Ïù¥Ìä∏
    private func updateEventManagerWithModifiedData() {
        // ÏàòÏ†ïÎêú Í∞úÏù∏ Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
        eventManager.updateRecommendData(
            hostName: nickname,
            hostNickname: alias,
            relationship: eventManager.relationship,
            detailSelected: eventManager.detailSelected,
            contactFrequency: eventManager.contactFrequency,
            meetFrequency: eventManager.meetFrequency
        )
        
        // Ï∞∏ÏÑù Ïó¨Î∂Ä ÏóÖÎç∞Ïù¥Ìä∏
        let isAttending = selectedAttend?.title == "Ï∞∏ÏÑù"
        let attendanceType: AttendanceType = isAttending ? .yes : .no
        
        eventManager.updateDateData(
            eventDate: eventManager.eventDate,
            selectedAttendance: attendanceType
        )
        
        print("EventCreationManager Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å")
    }
    
}
